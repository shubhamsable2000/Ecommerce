import { redirect } from "next/navigation";
import React from "react";
import { auth } from "./auth";
function SignedIn(props) {
  const { children } = props;
  const { userId } = auth();
  return userId ? /* @__PURE__ */ React.createElement(React.Fragment, null, children) : null;
}
function SignedOut(props) {
  const { children } = props;
  const { userId } = auth();
  return userId ? null : /* @__PURE__ */ React.createElement(React.Fragment, null, children);
}
function experimental__Gate(gateProps) {
  const { children, fallback, redirectTo, ...restAuthorizedParams } = gateProps;
  const { experimental__has } = auth();
  const isAuthorizedUser = experimental__has(restAuthorizedParams);
  const handleFallback = () => {
    if (!redirectTo && !fallback) {
      throw new Error("Provide `<Gate />` with a `fallback` or `redirectTo`");
    }
    if (redirectTo) {
      return redirect(redirectTo);
    }
    return /* @__PURE__ */ React.createElement(React.Fragment, null, fallback);
  };
  if (!isAuthorizedUser) {
    return handleFallback();
  }
  return /* @__PURE__ */ React.createElement(React.Fragment, null, children);
}
export {
  SignedIn,
  SignedOut,
  experimental__Gate
};
//# sourceMappingURL=controlComponents.js.map