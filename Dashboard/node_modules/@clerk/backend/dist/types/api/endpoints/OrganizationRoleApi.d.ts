import type { DeletedObject, Role } from '../resources';
import { AbstractAPI } from './AbstractApi';
type GetRoleListParams = {
    limit?: number;
    offset?: number;
    query?: string;
    order_by?: string;
};
type CreateParams = {
    /**
     * A name of a role in a readable friendly format.
     * F.e. `Teacher` or `Administrator`
     */
    name: string;
    /**
     * A unique identifier that represents the role.
     * F.e. `org:administrator`
     */
    key: string;
    /**
     * A brief description of what the role represents or its intended use.
     */
    description: string;
    /**
     * An array of permission ids that will be assigned to this role.
     */
    permissions: string[];
};
type GetOrganizationRoleParams = {
    roleId: string;
};
type UpdateParams = {
    /**
     * A name of a role in a readable friendly format.
     * F.e. `Teacher` or `Administrator`
     * Passing undefined has no effect to the existing value.
     */
    name?: string;
    /**
     * A unique identifier that represents the role.
     * F.e. `org:administrator`
     * Passing undefined has no effect to the existing value.
     */
    key?: string;
    /**
     * A brief description of what the role represents or its intended use.
     * Passing undefined has no effect to the existing value.
     */
    description?: string;
    /**
     * An array of permission ids that will be assigned to this role.
     * Passing undefined has no effect to the permission that already exist.
     * Passing an empty array will override the existing permissions.
     */
    permissions?: string[];
};
type RemovePermissionParams = {
    permissionId: string;
    roleId: string;
};
type AssignPermissionParams = RemovePermissionParams;
export declare class OrganizationRoleAPI extends AbstractAPI {
    getOrganizationRoleList(params?: GetRoleListParams): Promise<Role[]>;
    createOrganizationRole(params: CreateParams): Promise<Role>;
    getOrganizationRole(params: GetOrganizationRoleParams): Promise<Role>;
    updateOrganizationRole(roleId: string, params: UpdateParams): Promise<Role>;
    deleteOrganizationRole(roleId: string): Promise<DeletedObject>;
    assignPermissionToRole(params: AssignPermissionParams): Promise<Role>;
    removePermissionFromRole(params: RemovePermissionParams): Promise<Role>;
}
export {};
//# sourceMappingURL=OrganizationRoleApi.d.ts.map